<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-health-check-00" category="info">

  <front>
    <title>Health Check Response Format for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <postal>
          <street>114 5th Avenue</street>
          <city>New York</city>
          <country>United States</country>
        </postal>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a service health check response format for HTTP APIs.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="strong">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/">https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The vast majority of modern APIs driving data to web and mobile applications
use HTTP <xref target="RFC7230"/> as their protocol. The health and uptime of these
APIs determine availability of the applications themselves. In distributed
systems built with a number of APIs, understanding the health status of the APIs
and making corresponding decisions, for failover or circuit-breaking, are
essential for providing highly available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. There is currently no standard for the
health check output response, however, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific rformats creates significant
challenges, disallowing any meaningful interoprerability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC8259"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="api-health-response" title="API Health Response">

<t>An API Health Response Format (or, interchangeably, “health check response”)
uses the format described in JSON <xref target="RFC8259"/> and has the media type
“application/vnd.health+json”.</t>

<t>Its content consists of a single mandatory root field (“status”) and several
optional fields:</t>

<t><list style="symbols">
  <t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:  <list style="symbols">
      <t>“pass”: healthy,</t>
      <t>“fail”: unhealthy, and</t>
      <t>“warn”: healthy, with some concerns.</t>
    </list>
For “pass” and “warn” statuses HTTP response code in the 2xx - 3xx range MUST
be used. for “fail” status HTTP response code in the 4xx - 5xx range MUST be
used. In case of the “warn” status, additional information SHOULD be provided,
utilizing optional fields of the response.</t>
  <t>version: (optional) public version of the service.</t>
  <t>release_id: (optional) in well-designed APIs, backwards-compatible changes in
the service should not update a version number. APIs usually change their
version number as infrequently as possible, to preserve stable interface.
However implementation of an API may change much more frequently, which leads
to the importance of having separate “release number” or “release_id” that is
different from the public version of the API.</t>
  <t>uptime: (optional) current uptime in seconds since the last restart</t>
  <t>connections: (optional) current number of active connections</t>
  <t>notes: (optional) array of notes relevant to current state of health</t>
  <t>output: (optional) raw error output, in case of “fail” or “warn” states. This
field SHOULD be omitted for “pass” state.</t>
  <t>details: (optional) an array of objects optionally providing additional
information regarding the various sub-components of the service.</t>
  <t>links: (optional) an array of objects containing link relations and URIs 
<xref target="RFC3986"/> for external links that MAY contain more information about the 
health of the endpoint. Per web-linking standards <xref target="RFC5988"/> a link relationship
SHOULD either be a common/registered one or be indicated as a URI, to avoid
name clashes.</t>
  <t>serviceID: (optional) unique identifier of the service, in the application
scope.</t>
  <t>description: (optional) human-friendly description of the service.</t>
</list></t>

<t>For example:</t>

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/vnd.health+json

  HTTP/1.1 200 OK
  Content-Type: application/vnd.health+json
  Cache-Control: max-age=3600
  Connection: close

  {
    "status": "pass",
    "version" : "1",
    "release_id" : "1.2.2",
    "uptime": "1209600.245",
    "connections" : 25,
    "notes": [""],
    "output": "",
    "details": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentName": "Cassandra",
        "componentType" : "datastore",
        "metricName" : "responseTime",
        "metricValue": 250,
        "metricUnit" : "milliseconds",
        "status": "pass",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentName": "Cassandra",
        "type" : "datastore",
        "metricName" : "connections",
        "metricValue": 75,
        "status": "warn",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "componentName": "cpu",
        "type" : "system",
        "metricName" : "utilization",
        "metricValue": 85,
        "metricUnit" : "percent",
        "status": "warn",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "componentName": "cpu",
        "type" : "system",
        "metricName" : "utilization",
        "metricValue": 85,
        "metricUnit" : "percent",
        "status": "warn",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "componentName": "memory",
        "type" : "system",
        "node" : 1,
        "metricName" : "utilization",
        "metricValue": 8.5,
        "metricUnit" : "gb",
        "status": "warn",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "componentName": "memory",
        "node" : 2,
        "type" : "system",
        "metricName" : "utilization",
        "metricValue": 5500,
        "metricUnit" : "mb",
        "status": "pass",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "links": [
      {"rel": "about", "uri": "http://api.example.com/about/authz"},
      {
        "rel": "http://api.example.com/rel/thresholds",
        "uri": "http://api.example.com/about/authz/thresholds"
      }
    ],
    "serviceID": "f03e522f-1f44-4062-9b55-9587f91c9c41",
    "description": "health of authz service"
  }
]]></artwork></figure>

</section>
<section anchor="details-object" title="Details Object">

<t>Following fields MAY appear and rules SHOULD be used for the details objects of the reponse.</t>

<t><list style="symbols">
  <t>componentId: (required) unique identifier of an instance of a specific
sub-component/dependency of a service. Multiple objects with the same
componentId MAY appear in the details, if they are from different nodes.</t>
  <t>status: (required) “pass”, “fail” or “warn”. Same semantic meaning as at  the
top level.</t>
  <t>componentName: (optional) human-readable name for the component.</t>
  <t>componentType: (optional) SHOULD be present if componentName is present. Type
of the component. Could be one of:
  <list style="symbols">
      <t>Pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>component</t>
          <t>datastore</t>
          <t>system</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
  <t>metricName: (optional) Could be one of:
  <list style="symbols">
      <t>Pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>utilization</t>
          <t>responseTime</t>
          <t>connections</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
  <t>metricValue: (optional) could be any valid JSON value, such as: string, number,
object, array or literal.</t>
  <t>metricUnit: (optional) SHOULD be present if metricValue is present. Could be
one of:
  <list style="symbols">
      <t>Pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>data size abbreviations: kb, mb, gb, tb, or pb that respectively stand
for: kilobyte, megabyte, gigabyte, terabyte and petabyte.</t>
          <t>time abbreviations: ns, ms, s, hr, min, d, yr that respectively stand for:
nanosecond, millisecond, second, hour, day, and year.</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
  <t>output: (optional) raw error output, in case of “fail” or “warn” states. This
field SHOULD be omitted for “pass” state.</t>
</list></t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="media-type-registration" title="Media Type Registration">

<t>TODO: application/vnd.health+json is being submitted for registration per
<xref target="RFC6838"/></t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC8259" target='https://www.rfc-editor.org/info/rfc8259'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2017' month='December' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='STD' value='90'/>
<seriesInfo name='RFC' value='8259'/>
<seriesInfo name='DOI' value='10.17487/RFC8259'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making an health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses must be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service.</t>
  <t>Custom link relation types, as well as the URIs for variables, should lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged to obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>


  </back>

<!-- ##markdown-source:
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
MwAA

-->

</rfc>

