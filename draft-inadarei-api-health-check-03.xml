<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version  -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-health-check-03" category="info">

  <front>
    <title>Health Check Response Format for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <postal>
          <street>114 5th Avenue</street>
          <city>New York</city>
          <country>United States</country>
        </postal>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a service health check response format for HTTP APIs.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="strong">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/">https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The vast majority of modern APIs driving data to web and mobile applications use
HTTP <xref target="RFC7230"/> as their protocol. The health and uptime of these APIs
determine availability of the applications themselves. In distributed systems
built with a number of APIs, understanding the health status of the APIs and
making corresponding decisions, for caching, failover or circuit-breaking, are
essential to the ability of providing highly-available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. However, there is currently no standard
for the health check output response, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific formats creates significant
challenges, disallowing any meaningful interoperability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC8259"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="api-health-response" title="API Health Response">

<t>Health Check Response Format for HTTP APIs uses the JSON format described in
<xref target="RFC8259"/> and has the media type “application/health+json”.</t>

<t>Its content consists of a single mandatory root field (“status”) and several
optional fields:</t>

<section anchor="status" title="status">

<t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:</t>

<t><list style="symbols">
  <t>“pass”: healthy (acceptable aliases: “ok” to support Node’s Terminius and
“up” for Java’s SpringBoot),</t>
  <t>“fail”: unhealthy (acceptable aliases: “error” to support Node’s Terminius and
“down” for Java’s SpringBoot), and</t>
  <t>“warn”: healthy, with some concerns.</t>
</list></t>

<t>The value of the status field is case-insensitive and is tightly related with
  the HTTP response code returned by the health endpoint. For “pass” status,
  HTTP response code in the 2xx-3xx range MUST be used. For “fail” status,
  HTTP response code in the 4xx-5xx range MUST be used. In case of the “warn”
  status, endpoints MUST return HTTP status in the 2xx-3xx range, and
  additional information SHOULD be provided, utilizing optional fields of the
  response.</t>

<t>A health endpoint is only meaningful in the context of the component it
  indicates the health of. It has no other meaning or purpose. As such, its
  health is a conduit to the health of the component. Clients SHOULD assume that
  the HTTP response code returned by the health endpoint is applicable to the
  entire component (e.g. a larger API or a microservice). This is compatible
  with the behavior that current infrastructural tooling expects:
  load-balancers, service discoveries and others, utilizing health-checks.</t>

</section>
<section anchor="version" title="version">

<t>version: (optional) public version of the service.</t>

</section>
<section anchor="releaseid" title="releaseId">

<t>releaseId: (optional) in well-designed APIs, backwards-compatible changes in
  the service SHOULD not update a version number. APIs usually change their
  version number as infrequently as possible, to preserve stable interface.
  However implementation of an API may change much more frequently, which leads
  to the importance of having separate “release number” or “releaseID” that is
  different from the public version of the API.</t>

</section>
<section anchor="notes" title="notes">

<t>notes: (optional) array of notes relevant to current state of health</t>

</section>
<section anchor="output" title="output">

<t>output: (optional) raw error output, in case of “fail” or “warn” states. This
  field SHOULD be omitted for “pass” state.</t>

</section>
<section anchor="details" title="details">

<t>details (optional) is an object that provides more details about the status of
the service as it pertains to the information about the downstream dependencies
of the service in question. Please refer to the “The Details Object” section
for more information.</t>

</section>
<section anchor="links" title="links">

<t>links (optional) is an array of objects containing link relations and URIs
<xref target="RFC3986"/> for external links that MAY contain more information about the
health of the endpoint. Per web-linking standards <xref target="RFC8288"/> a link
relationship SHOULD either be a common/registered one or be indicated as a URI,
to avoid name clashes.  If a “self” link is provided, it MAY be used by clients
to check health via HTTP response code, as mentioned above.</t>

</section>
<section anchor="serviceid" title="serviceId">

<t>serviceId (optional) is a unique identifier of the service, in the application
scope.</t>

</section>
<section anchor="description" title="description">

<t>description (optional) is a human-friendly description of the service.</t>

</section>
</section>
<section anchor="the-details-object" title="The Details Object">

<t>The “details” object MAY have a number of unique keyes, one for each logical
downstream dependency or sub-component. Since each sub-component may be
backed by several nodes with varying health statuses, these keys point to arrays
of objects. In case of a single-node sub-component (or if presence of nodes is
not relevant), a single-element array SHOULD be used as the value, for
consistency.</t>

<t>The key identifying an element in the object SHOULD be a unique string within
the details section. It MAY have two parts: “{componentName}:{measurementName}”,
in which case the meaning of the parts SHOULD be as follows:</t>

<t><list style="symbols">
  <t>componentName: (optional) human-readable name for the component. MUST not
contain a colon, in the name, since colon is used as a separator.</t>
  <t>measurementName: (optional) name of the measurement type (a data point type)
that the status is reported for. MUST not contain a colon, in the name, since
colon is used as a separator. The observation’s name can be one of:
  <list style="symbols">
      <t>A pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>utilization</t>
          <t>responseTime</t>
          <t>connections</t>
          <t>uptime</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
</list></t>

<t>On the value side of the equation, each “component details” object in the array
MAY have one of the following object keys:</t>

<section anchor="componentid" title="componentId">

<t>componentId: (optional) is a unique identifier of an instance of a specific
sub-component/dependency of a service. Multiple objects with the same
componentID MAY appear in the details, if they are from different nodes.</t>

</section>
<section anchor="componenttype" title="componentType">

<t>componentType: (optional) SHOULD be present if componentName is present. It’s
a type of the component and could be one of:</t>

<t><list style="symbols">
  <t>Pre-defined value from this spec. Pre-defined values include:
  <list style="symbols">
      <t>component</t>
      <t>datastore</t>
      <t>system</t>
    </list></t>
  <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
  <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
</list></t>

</section>
<section anchor="observedvalue" title="observedValue">

<t>observedValue: (optional) could be any valid JSON value, such as: string, number,
object, array or literal.</t>

</section>
<section anchor="observedunit" title="observedUnit">

<t>observedUnit (optional) SHOULD be present if observedValue is present. Clarifies
the unit of measurement in which observedValue is reported, e.g. for a time-based
value it is important to know whether the time is reported in seconds, minutes,
hours or something else. To make sure unit is denoted by a well-understood name
or an abbreviation, it SHOULD be one of:</t>

<t><list style="symbols">
  <t>A common and standard term from a well-known source such as schema.org, IANA,
microformats, or a standards document such as <xref target="RFC3339"/>.</t>
  <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
</list></t>

</section>
<section anchor="status-1" title="status">

<t>status (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
<section anchor="time" title="time">

<t>time (optional) is the date-time, in ISO8601 format, at which the reading of the
observedValue was recorded. This assumes that the value can be cached and the
reading typically doesn’t happen in real time, for performance and scalability
purposes.</t>

</section>
<section anchor="output-1" title="output">

<t>output (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
<section anchor="links-1" title="links">

<t>links (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
</section>
<section anchor="example-output" title="Example Output">

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/health+json

  HTTP/1.1 200 OK
  Content-Type: application/health+json
  Cache-Control: max-age=3600
  Connection: close

{
  "status": "pass",
  "version": "1",
  "releaseID": "1.2.2",
  "notes": [""],
  "output": "",
  "serviceID": "f03e522f-1f44-4062-9b55-9587f91c9c41",
  "description": "health of authz service",
  "details": {
    "cassandra:responseTime": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentType": "datastore",
        "observedValue": 250,
        "observedUnit": "ms",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "cassandra:connections": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "type": "datastore",
        "observedValue": 75,
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": "",
        "links": {
          "self": "http://api.example.com/dbnode/dfd6cf2b/health"
        }
      }
    ],
    "uptime": [
      {
        "componentType": "system",
        "observedValue": 1209600.245,
        "observedUnit": "s",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z"
      }
    ],
    "cpu:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "observedValue": 85,
        "observedUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "observedValue": 85,
        "observedUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "memory:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "observedValue": 8.5,
        "observedUnit": "GiB",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "observedValue": 5500,
        "observedUnit": "MiB",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ]
  },
  "links": {
    "about": "http://api.example.com/about/authz",
    "http://api.x.io/rel/thresholds":
      "http://api.x.io/about/authz/thresholds"
  }
}
]]></artwork></figure>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>The media type for health check response is application/health+json.</t>

<t><list style="symbols">
  <t>Media type name: application</t>
  <t>Media subtype name: health+json</t>
  <t>Required parameters: n/a</t>
  <t>Optional parameters: n/a</t>
  <t>Encoding considerations: binary</t>
  <t>Security considerations: Health+JSON shares security issues common to all JSON
  content types. See RFC 8259 Section #12 for additional information.  <vspace blankLines='1'/>
Health+JSON allows utilization of Uniform Resource Identifiers (URIs) and as such
  shares security issues common to URI usage. See RFC 3986 Section #7
  for additional information.  <vspace blankLines='1'/>
Since health+json can carry wide variety of data, some data may require privacy
  or integrity services. This specification does not prescribe any specific
  solution and assumes that concrete implementations will utilize common, trusted
  approaches such as TLS/HTTPS, OAuth2 etc.</t>
  <t>Interoperability considerations: None</t>
  <t>Published specification: this RFC draft</t>
  <t>Applications which use this media: Various</t>
  <t>Fragment identifier considerations: Health+JSON follows RFC6901 for implementing
URI Fragment Identification standard to JSON content types.</t>
  <t>Restrictions on usage: None</t>
  <t>Additional information:
  <list style="numbers">
      <t>Deprecated alias names for this type: n/a</t>
      <t>Magic number(s): n/a</t>
      <t>File extension(s): .json</t>
      <t>Macintosh file type code: TEXT</t>
      <t>Object Identifiers: n/a</t>
    </list></t>
  <t>General Comments:</t>
  <t>Person to contact for further information:
  <list style="numbers">
      <t>Name: Irakli Nadareishvili</t>
      <t>Email: irakli@gmail.com</t>
    </list></t>
  <t>Intended usage: Common</t>
  <t>Author/Change controller: Irakli Nadareishvili</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making an health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses SHOULD be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service. Any method of cach lifetime negotiation provided by HTTP spec is
acceptable (e.g. ETags are just fine).</t>
  <t>Custom link relation types, as well as the URIs for variables, should lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged to obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC8288" target='https://www.rfc-editor.org/info/rfc8288'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2017' month='October' />
<abstract><t>This specification defines a model for the relationships between resources on the Web (&quot;links&quot;) and the type of those relationships (&quot;link relation types&quot;).</t><t>It also defines the serialisation of such links in HTTP headers with the Link header field.</t></abstract>
</front>
<seriesInfo name='RFC' value='8288'/>
<seriesInfo name='DOI' value='10.17487/RFC8288'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC8259" target='https://www.rfc-editor.org/info/rfc8259'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2017' month='December' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='STD' value='90'/>
<seriesInfo name='RFC' value='8259'/>
<seriesInfo name='DOI' value='10.17487/RFC8259'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
<abstract><t>This document defines a date and time format for use in Internet protocols that is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.</t></abstract>
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIADfWdFwAA+1c7XLbyJX9j6fo4vwY2yEpivqwxP2oVWTNWLNja9aSk82m
pqaaQJPECAQYNCCamfJUHmT35fIke869DRCUZHuSnWxls8mPMQU0bt++n+fe
7s5gMIiqtMrcxLx0NqsW5nzh4lvzxvlVkXtnvijKpa3MrCjNy5ubb8zZN5c+
stNp6e4mUVLEuV3i26S0s2qQ5jaxpUsHdpUOFkJuEJPcYHQQJbbCwPFo/ySK
8XNelJuJSfNZEUXpqpyYqqx9NR6NTkfjCETsxHzpclfaLFoX5e28LOrVJLp1
G/yVTMxlXrkyd9XgBWeOIl/ZPPnOZkWOSTbOR6t0Yn5bFXHf4D9pnri86htf
lFXpZh6/NsvwoyrTGK/iYrmy4ccSg/EqzbM0d99Gka2rRVFOIjOIDP6X5h4M
DM1rXa1f3KVZKm9UGJelvc3SR15jLueqidnfPzRHEPXZnctrJ6/itII4Xru1
+Q1Wq4+KOq8opLd5WrnEXFcQm5dXbmnTDNKTif5lzr+G4Fve1SVWvqiq1WRv
b71eD2el84tpVpdTL2OiXDSa3jksyLz54ny8v38afh6cnhzz52f4fTQeH4fH
J+OTk/Dz+fjgsH16hO8iqnCXIMaMws/jk4POl/vNNAcH/HIwGBg7hVAg9yi6
WaTewKBqSt+symJVeOeNNd6Vd2nsjBqUEYMyZWOfs0fsc6i086Jy373mf6ri
uzfOJq70UfTsGTgwFy8ub67eTMwqcxZUSrcs7pypyIN3cZUWuZk6EHVmVU+z
FBaLR8+ekU1nUu9rsJalXieWz8QFTGz5IZ7WeWLA1z9SEx6qmKfVop5SA3uN
m+yVszi4iSxqT+n+81BnWRYgX7qY4lDimKVLsqEzDLTT4gFF0nqjJOKFzecU
KNZEzt2fzh9dI6383tLi85K0r50zNvMFROCUyc+9ieuy5Izwyar2cBd5e3lx
84VBELDU960r+5g+aqfvvBimrpoNi3K+B2vY+0RkkRVS2cs0STIXRZ8xNJRF
UosSVZJ34Ncs7fdFCS8zxQyihS3kYivgOr1L87mwhlhh1m5qEEswZppmWN1q
1ajfm9q7SKzshx+Cnb9/b6zn+tKSNotYU2RDw0mDuZJUvarSpePEGAhrkxia
OMhwiQBj7B3812K2wB2ltTMtHiy9y+6cH2J1JkkZtKY1Veg3UMXSR9M6zSqz
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
QwAA

-->

</rfc>

