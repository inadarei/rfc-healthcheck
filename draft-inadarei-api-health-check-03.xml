<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-health-check-03" category="info">

  <front>
    <title>Health Check Response Format for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <postal>
          <street>114 5th Avenue</street>
          <city>New York</city>
          <country>United States</country>
        </postal>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a service health check response format for HTTP APIs.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="strong">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/">https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The vast majority of modern APIs driving data to web and mobile applications use
HTTP <xref target="RFC7230"/> as their protocol. The health and uptime of these APIs
determine availability of the applications themselves. In distributed systems
built with a number of APIs, understanding the health status of the APIs and
making corresponding decisions, for caching, failover or circuit-breaking, are
essential to the ability of providing highly-available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. However, there is currently no standard
for the health check output response, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific formats creates significant
challenges, disallowing any meaningful interoperability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC8259"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="api-health-response" title="API Health Response">

<t>Health Check Response Format for HTTP APIs uses the JSON format described in
<xref target="RFC8259"/> and has the media type “application/health+json”.</t>

<t>Its content consists of a single mandatory root field (“status”) and several
optional fields:</t>

<section anchor="status" title="status">

<t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:</t>

<t><list style="symbols">
  <t>“pass”: healthy (acceptable aliases: “ok” to support Node’s Terminius and
“up” for Java’s SpringBoot),</t>
  <t>“fail”: unhealthy (acceptable aliases: “error” to support Node’s Terminius and
“down” for Java’s SpringBoot), and</t>
  <t>“warn”: healthy, with some concerns.</t>
</list></t>

<t>The value of the status field is case-insensitive and is tightly related with
  the HTTP response code returned by the health endpoint. For “pass” status,
  HTTP response code in the 2xx-3xx range MUST be used. For “fail” status,
  HTTP response code in the 4xx-5xx range MUST be used. In case of the “warn”
  status, endpoints MUST return HTTP status in the 2xx-3xx range, and
  additional information SHOULD be provided, utilizing optional fields of the
  response.</t>

<t>A health endpoint is only meaningful in the context of the component it
  indicates the health of. It has no other meaning or purpose. As such, its
  health is a conduit to the health of the component. Clients SHOULD assume that
  the HTTP response code returned by the health endpoint is applicable to the
  entire component (e.g. a larger API or a microservice). This is compatible
  with the behavior that current infrastructural tooling expects:
  load-balancers, service discoveries and others, utilizing health-checks.</t>

</section>
<section anchor="version" title="version">

<t>version: (optional) public version of the service.</t>

</section>
<section anchor="releaseid" title="releaseId">

<t>releaseId: (optional) in well-designed APIs, backwards-compatible changes in
  the service should not update a version number. APIs usually change their
  version number as infrequently as possible, to preserve stable interface.
  However, implementation of an API may change much more frequently, which leads
  to the importance of having separate “release number” or “releaseID” that is
  different from the public version of the API.</t>

</section>
<section anchor="notes" title="notes">

<t>notes: (optional) array of notes relevant to current state of health</t>

</section>
<section anchor="output" title="output">

<t>output: (optional) raw error output, in case of “fail” or “warn” states. This
  field SHOULD be omitted for “pass” state.</t>

</section>
<section anchor="details" title="details">

<t>details (optional) is an object that provides more details about the status of
the service as it pertains to the information about the downstream dependencies
of the service in question. Please refer to the “The Details Object” section
for more information.</t>

</section>
<section anchor="links" title="links">

<t>links (optional) is an array of objects containing link relations and URIs
<xref target="RFC3986"/> for external links that MAY contain more information about the
health of the endpoint. Per web-linking standards <xref target="RFC8288"/> a link
relationship SHOULD either be a common/registered one or be indicated as a URI,
to avoid name clashes.  If a “self” link is provided, it MAY be used by clients
to check health via HTTP response code, as mentioned above.</t>

</section>
<section anchor="serviceid" title="serviceId">

<t>serviceId (optional) is a unique identifier of the service, in the application
scope.</t>

</section>
<section anchor="description" title="description">

<t>description (optional) is a human-friendly description of the service.</t>

</section>
</section>
<section anchor="the-details-object" title="The Details Object">

<t>The “details” object MAY have a number of unique keys, one for each logical
downstream dependencies or sub-components. Since each sub-component may be
backed by several nodes with varying health statuses, these keys point to arrays
of objects. In case of a single-node sub-component (or if presence of nodes is
not relevant), a single-element array should be used as the value, for
consistency.</t>

<t>The key identifying an element in the object should be a unique string within
the details section. It MAY have two parts: “{componentName}:{measurementName}”,
in which case the meaning of the parts SHOULD be as follows:</t>

<t><list style="symbols">
  <t>componentName: (optional) human-readable name for the component. MUST not 
contain a colon, in the name, since colon is used as a separator.</t>
  <t>measurementName: (optional) name of the measurement type (a data point type)
that the status is reported for. MUST not contain a colon, in the name, since
colon is used as a separator. The observation’s name can be one of:
  <list style="symbols">
      <t>A pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>utilization</t>
          <t>responseTime</t>
          <t>connections</t>
          <t>uptime</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
</list></t>

<t>On the value side of the equation, each “component details” object in the array
MAY have one of the following object keys:</t>

<section anchor="componentid" title="componentId">

<t>componentId: (optional) is a unique identifier of an instance of a specific
sub-component/dependency of a service. Multiple objects with the same
componentID MAY appear in the details, if they are from different nodes.</t>

</section>
<section anchor="componenttype" title="componentType">

<t>componentType: (optional) SHOULD be present if componentName is present. It’s
a type of the component and could be one of:</t>

<t><list style="symbols">
  <t>Pre-defined value from this spec. Pre-defined values include:
  <list style="symbols">
      <t>component</t>
      <t>datastore</t>
      <t>system</t>
    </list></t>
  <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
  <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
</list></t>

</section>
<section anchor="observedvalue" title="observedValue">

<t>observedValue: (optional) could be any valid JSON value, such as: string, number,
object, array or literal.</t>

</section>
<section anchor="observedunit" title="observedUnit">

<t>observedUnit (optional) SHOULD be present if observedValue is present and can 
be more that one type of unit. Clarifies the unit of measurement in which 
observedUnit is reported, e.g. for a time-based value it is important to know 
whether the time is reported in seconds, minutes, hours or something else. To 
make sure unit is denoted by a well-understood name or an abbreviation, it 
should be one of:</t>

<t><list style="symbols">
  <t>A common and standard term from a well-known source such as schema.org, IANA,
microformats, or a standards document such as <xref target="RFC3339"/>.</t>
  <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
</list></t>

</section>
<section anchor="status-1" title="status">

<t>status (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
<section anchor="time" title="time">

<t>time (optional) is the date-time, in ISO8601 format, at which the reading of the
observedValue was recorded. This assumes that the value can be cached and the
reading typically doesn’t happen in real time, for performance and scalability
purposes.</t>

</section>
<section anchor="output-1" title="output">

<t>output (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
<section anchor="links-1" title="links">

<t>links (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
</section>
<section anchor="example-output" title="Example Output">

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/health+json

  HTTP/1.1 200 OK
  Content-Type: application/health+json
  Cache-Control: max-age=3600
  Connection: close

{
  "status": "pass",
  "version": "1",
  "releaseID": "1.2.2",
  "notes": [""],
  "output": "",
  "serviceID": "f03e522f-1f44-4062-9b55-9587f91c9c41",
  "description": "health of authz service",
  "details": {
    "cassandra:responseTime": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentType": "datastore",
        "observedValue": 250,
        "observedUnit": "ms",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "cassandra:connections": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "type": "datastore",
        "observedValue": 75,
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": "",
        "links": {
          "self": "http://api.example.com/dbnode/dfd6cf2b/health"
        }
      }
    ],
    "uptime": [
      {
        "componentType": "system",
        "observedValue": 1209600.245,
        "observedUnit": "s",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z"
      }
    ],
    "cpu:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "observedValue": 85,
        "observedUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "observedValue": 85,
        "observedUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "memory:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "observedValue": 8.5,
        "observedUnit": "GiB",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "observedValue": 5500,
        "observedUnit": "MiB",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ]
  },
  "links": {
    "about": "http://api.example.com/about/authz",
    "http://api.x.io/rel/thresholds":
      "http://api.x.io/about/authz/thresholds"
  }
}
]]></artwork></figure>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases, the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>The media type for health check response is application/health+json.</t>

<t><list style="symbols">
  <t>Media type name: application</t>
  <t>Media subtype name: health+json</t>
  <t>Required parameters: n/a</t>
  <t>Optional parameters: n/a</t>
  <t>Encoding considerations: binary</t>
  <t>Security considerations: Health+JSON shares security issues common to all JSON
  content types. See RFC 8259 Section #12 for additional information.  <vspace blankLines='1'/>
Health+JSON allows utilization of Uniform Resource Identifiers (URIs) and as such
  shares security issues common to URI usage. See RFC 3986 Section #7
  for additional information.  <vspace blankLines='1'/>
Since health+json can carry wide variety of data, some data may require privacy
  or integrity services. This specification does not prescribe any specific
  solution and assumes that concrete implementations will utilize common, trusted
  approaches such as TLS/HTTPS, OAuth2 etc.</t>
  <t>Interoperability considerations: None</t>
  <t>Published specification: this RFC draft</t>
  <t>Applications which use this media: Various</t>
  <t>Fragment identifier considerations: Health+JSON follows RFC6901 for implementing
URI Fragment Identification standard to JSON content types.</t>
  <t>Restrictions on usage: None</t>
  <t>Additional information:
  <list style="numbers">
      <t>Deprecated alias names for this type: n/a</t>
      <t>Magic number(s): n/a</t>
      <t>File extension(s): .json</t>
      <t>Macintosh file type code: TEXT</t>
      <t>Object Identifiers: n/a</t>
    </list></t>
  <t>General Comments:</t>
  <t>Person to contact for further information:
  <list style="numbers">
      <t>Name: Irakli Nadareishvili</t>
      <t>Email: irakli@gmail.com</t>
    </list></t>
  <t>Intended usage: Common</t>
  <t>Author/Change controller: Irakli Nadareishvili</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making a health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses SHOULD be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service. Any method of cache lifetime negotiation provided by HTTP spec is
acceptable (e.g. ETags are just fine).</t>
  <t>Custom link relation types, as well as the URIs for variables, should lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged to obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC8288" target='https://www.rfc-editor.org/info/rfc8288'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2017' month='October' />
<abstract><t>This specification defines a model for the relationships between resources on the Web (&quot;links&quot;) and the type of those relationships (&quot;link relation types&quot;).</t><t>It also defines the serialisation of such links in HTTP headers with the Link header field.</t></abstract>
</front>
<seriesInfo name='RFC' value='8288'/>
<seriesInfo name='DOI' value='10.17487/RFC8288'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC8259" target='https://www.rfc-editor.org/info/rfc8259'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2017' month='December' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='STD' value='90'/>
<seriesInfo name='RFC' value='8259'/>
<seriesInfo name='DOI' value='10.17487/RFC8259'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
<abstract><t>This document defines a date and time format for use in Internet protocols that is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.</t></abstract>
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIALAn1VsAA+1c7XLbyJX9j6fo4vyI7ZAURUm2zP2oVWxPrOzYmrXkZLOp
VKoJNEWMQIBBA6KZKafyILsvlyfZc+7tBkFJ9kyyk61sNvkxpoDG7dv389zb
3RmNRkmTN4WbmdfOFs3SvFi69Ma8c35dld6ZL6t6ZRuzqGrz+urqa3P29blP
7Hxeu9tZklVpaVf4Nqvtohnlpc1s7fKRXeejpZAbpSQ3mhwlmW0wcDo5PE1S
/Lyu6u3M5OWiSpJ8Xc9MU7e+mU4mzyfTBETszPzUla62RbKp6pvrumrXs+TG
bfFXNjPnZePq0jWjl5w5SXxjy+w3tqhKTLJ1PlnnM/OrpkqHBv/Jy8yVzdD4
qm5qt/D4tV2FH02dp3iVVqu1DT9WGIxXeVnkpft1kti2WVb1LDGjxOB/eenB
wNi81dX65W1e5PJGhXFe25sif+A15nKumZnDw2NzAlGf3bqydfIqzRuI463b
mF9itfqoasuGQnpf5o3LzGUDsXl55VY2LyA9mehfrvnXGHzLu7bGypdNs54d
HGw2m/Gidn45L9p67mVMUopG81uHBZl3X76YHh4+Dz+Pnp8+5c8v8PtkOn0a
Hp9OT0/Dz2fTo+Pu6Qm+S6jCfYIYMwk/n54e9b48jNMcHfHL0Whk7BxCgdyT
5GqZewODail9s66rdeWdN9Z4V9/mqTNqUEYMytTRPhcP2OdYaZdV437zlv9p
qt+8czZztU+SJ0/AgXn18vzq4t3MrAtnQaV2q+rWmYY8eJc2eVWauQNRZ9bt
vMhhsXj05AnZdCb3vgVrRe51YvlMXMCklh/iaVtmBnz9IzXhoYrrvFm2c2rg
ILrJQb1Ig5vIog6U7j+PdZZVBfK1SykOJY5Z+iQjnXGgnVf3KJLWOyWRLm15
TYFiTeTc/en80TXyxh+sLD6vSfvSOWMLX0EETpn8kTdpW9ecET7ZtB7uIm/P
X119aRAELPV94+ohpk+66XsvxrlrFuOqvj6ANRx8R2SRFVLZqzzLCpckXzA0
1FXWihJVkrfg16zsN1UNLzPVAqKFLZRiK+A6v83La2ENscJs3NwglmDMPC+w
uvU6qt+b1rtErOzbb4Odf/xorOf68po2i1hTFWPDSYO5klS7bvKV48QYCGuT
GJo5yHCFAGPsLfzXYrbAHaW1Ny0erLwrbp0fY3Umyxm05i1V6LdQxcon8zYv
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
KJPj3f8NTrNzZ69DAAA=

-->

</rfc>

