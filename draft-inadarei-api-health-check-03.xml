<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version  -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-health-check-03" category="info">

  <front>
    <title>Health Check Response Format for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <postal>
          <street>114 5th Avenue</street>
          <city>New York</city>
          <country>United States</country>
        </postal>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a service health check response format for HTTP APIs.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="strong">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/">https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The vast majority of modern APIs driving data to web and mobile applications use
HTTP <xref target="RFC7230"/> as their protocol. The health and uptime of these APIs
determine availability of the applications themselves. In distributed systems
built with a number of APIs, understanding the health status of the APIs and
making corresponding decisions, for caching, failover or circuit-breaking, are
essential to the ability of providing highly-available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. However, there is currently no standard
for the health check output response, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific formats creates significant
challenges, disallowing any meaningful interoperability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC8259"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="api-health-response" title="API Health Response">

<t>Health Check Response Format for HTTP APIs uses the JSON format described in
<xref target="RFC8259"/> and has the media type “application/health+json”.</t>

<t>Its content consists of a single mandatory root field (“status”) and several
optional fields:</t>

<section anchor="status" title="status">

<t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:</t>

<t><list style="symbols">
  <t>“pass”: healthy (acceptable aliases: “ok” to support Node’s Terminius and
“up” for Java’s SpringBoot),</t>
  <t>“fail”: unhealthy (acceptable aliases: “error” to support Node’s Terminius and
“down” for Java’s SpringBoot), and</t>
  <t>“warn”: healthy, with some concerns.</t>
</list></t>

<t>The value of the status field is case-insensitive and is tightly related with
  the HTTP response code returned by the health endpoint. For “pass” status,
  HTTP response code in the 2xx-3xx range MUST be used. For “fail” status,
  HTTP response code in the 4xx-5xx range MUST be used. In case of the “warn”
  status, endpoints MUST return HTTP status in the 2xx-3xx range, and
  additional information SHOULD be provided, utilizing optional fields of the
  response.</t>

<t>A health endpoint is only meaningful in the context of the component it
  indicates the health of. It has no other meaning or purpose. As such, its
  health is a conduit to the health of the component. Clients SHOULD assume that
  the HTTP response code returned by the health endpoint is applicable to the
  entire component (e.g. a larger API or a microservice). This is compatible
  with the behavior that current infrastructural tooling expects:
  load-balancers, service discoveries and others, utilizing health-checks.</t>

</section>
<section anchor="version" title="version">

<t>version: (optional) public version of the service.</t>

</section>
<section anchor="releaseid" title="releaseId">

<t>releaseId: (optional) in well-designed APIs, backwards-compatible changes in
  the service should not update a version number. APIs usually change their
  version number as infrequently as possible, to preserve stable interface.
  However implementation of an API may change much more frequently, which leads
  to the importance of having separate “release number” or “releaseID” that is
  different from the public version of the API.</t>

</section>
<section anchor="notes" title="notes">

<t>notes: (optional) array of notes relevant to current state of health</t>

</section>
<section anchor="output" title="output">

<t>output: (optional) raw error output, in case of “fail” or “warn” states. This
  field SHOULD be omitted for “pass” state.</t>

</section>
<section anchor="details" title="details">

<t>details (optional) is an object that provides more details about the status of
the service as it pertains to the information about the downstream dependencies
of the service in question. Please refer to the “The Details Object” section
for more information.</t>

</section>
<section anchor="links" title="links">

<t>links (optional) is an array of objects containing link relations and URIs
<xref target="RFC3986"/> for external links that MAY contain more information about the
health of the endpoint. Per web-linking standards <xref target="RFC8288"/> a link
relationship SHOULD either be a common/registered one or be indicated as a URI,
to avoid name clashes.  If a “self” link is provided, it MAY be used by clients
to check health via HTTP response code, as mentioned above.</t>

</section>
<section anchor="serviceid" title="serviceId">

<t>serviceId (optional) is a unique identifier of the service, in the application
scope.</t>

</section>
<section anchor="description" title="description">

<t>description (optional) is a human-friendly description of the service.</t>

</section>
</section>
<section anchor="the-details-object" title="The Details Object">

<t>The “details” object MAY have a number of unique keyes, one for each logical
downstream dependencies or sub-components. Since each sub-component may be
backed by several nodes with varying health statuses, these keys point to arrays
of objects. In case of a single-node sub-component (or if presence of nodes is
not relevant), a single-element array should be used as the value, for
consistency.</t>

<t>The key identifying an element in the object should be a unique string within
the details section. It MAY have two parts: “{componentName}:{measurementName}”,
in which case the meaning of the parts SHOULD be as follows:</t>

<t><list style="symbols">
  <t>componentName: (optional) human-readable name for the component. MUST not 
contain a colon, in the name, since colon is used as a separator.</t>
  <t>measurementName: (optional) name of the measurement type (a data point type)
that the status is reported for. MUST not contain a colon, in the name, since
colon is used as a separator. The observation’s name can be one of:
  <list style="symbols">
      <t>A pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>utilization</t>
          <t>responseTime</t>
          <t>connections</t>
          <t>uptime</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
</list></t>

<t>On the value side of the equation, each “component details” object in the array
MAY have one of the following object keys:</t>

<section anchor="componentid" title="componentId">

<t>componentId: (optional) is a unique identifier of an instance of a specific
sub-component/dependency of a service. Multiple objects with the same
componentID MAY appear in the details, if they are from different nodes.</t>

</section>
<section anchor="componenttype" title="componentType">

<t>componentType: (optional) SHOULD be present if componentName is present. It’s
a type of the component and could be one of:</t>

<t><list style="symbols">
  <t>Pre-defined value from this spec. Pre-defined values include:
  <list style="symbols">
      <t>component</t>
      <t>datastore</t>
      <t>system</t>
    </list></t>
  <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
  <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
</list></t>

</section>
<section anchor="observedvalue" title="observedValue">

<t>observedValue: (optional) could be any valid JSON value, such as: string, number,
object, array or literal.</t>

</section>
<section anchor="thresholdvalue" title="thresholdValue">
<t>thresholdValue: (optional) could be any valid JSON value, such as: string, number,
object, array or literal. Determines the value above (or below) which the status
changes from “pass” state to “warn” state or back. thresholdValue MUST only be
present if observedValue is also present.</t>

</section>
<section anchor="observedunit" title="observedUnit">

<t>observedUnit (optional) SHOULD be present if observedValue is present. Clarifies
the unit of measurement in which observedValue and thresholdValue are reported,
e.g. for a time-based value it is important to know whether the time is reported
in seconds, minutes, hours or something else. To make sure unit is denoted by a
well-understood name or an abbreviation, it should be one of:</t>

<t><list style="symbols">
  <t>A common and standard term from a well-known source such as schema.org, IANA,
microformats, or a standards document such as <xref target="RFC3339"/>.</t>
  <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
</list></t>

</section>
<section anchor="status-1" title="status">

<t>status (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
<section anchor="time" title="time">

<t>time (optional) is the date-time, in ISO8601 format, at which the reading of the
observedValue was recorded. This assumes that the value can be cached and the
reading typically doesn’t happen in real time, for performance and scalability
purposes.</t>

</section>
<section anchor="output-1" title="output">

<t>output (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
<section anchor="links-1" title="links">

<t>links (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
</section>
<section anchor="example-output" title="Example Output">

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/health+json

  HTTP/1.1 200 OK
  Content-Type: application/health+json
  Cache-Control: max-age=3600
  Connection: close

{
  "status": "pass",
  "version": "1",
  "releaseID": "1.2.2",
  "notes": [""],
  "output": "",
  "serviceID": "f03e522f-1f44-4062-9b55-9587f91c9c41",
  "description": "health of authz service",
  "details": {
    "cassandra:responseTime": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentType": "datastore",
        "observedValue": 250,
        "observedUnit": "ms",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "cassandra:connections": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "type": "datastore",
        "observedValue": 75,
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": "",
        "links": {
          "self": "http://api.example.com/dbnode/dfd6cf2b/health"
        }
      }
    ],
    "uptime": [
      {
        "componentType": "system",
        "observedValue": 1209600.245,
        "observedUnit": "s",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z"
      }
    ],
    "cpu:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "observedValue": 85,
        "observedUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "observedValue": 85,
        "observedUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "memory:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "observedValue": 8.5,
        "observedUnit": "GiB",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "observedValue": 5500,
        "observedUnit": "MiB",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ]
  },
  "links": {
    "about": "http://api.example.com/about/authz",
    "http://api.x.io/rel/thresholds":
      "http://api.x.io/about/authz/thresholds"
  }
}
]]></artwork></figure>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>The media type for health check response is application/health+json.</t>

<t><list style="symbols">
  <t>Media type name: application</t>
  <t>Media subtype name: health+json</t>
  <t>Required parameters: n/a</t>
  <t>Optional parameters: n/a</t>
  <t>Encoding considerations: binary</t>
  <t>Security considerations: Health+JSON shares security issues common to all JSON
  content types. See RFC 8259 Section #12 for additional information.  <vspace blankLines='1'/>
Health+JSON allows utilization of Uniform Resource Identifiers (URIs) and as such
  shares security issues common to URI usage. See RFC 3986 Section #7
  for additional information.  <vspace blankLines='1'/>
Since health+json can carry wide variety of data, some data may require privacy
  or integrity services. This specification does not prescribe any specific
  solution and assumes that concrete implementations will utilize common, trusted
  approaches such as TLS/HTTPS, OAuth2 etc.</t>
  <t>Interoperability considerations: None</t>
  <t>Published specification: this RFC draft</t>
  <t>Applications which use this media: Various</t>
  <t>Fragment identifier considerations: Health+JSON follows RFC6901 for implementing
URI Fragment Identification standard to JSON content types.</t>
  <t>Restrictions on usage: None</t>
  <t>Additional information:
  <list style="numbers">
      <t>Deprecated alias names for this type: n/a</t>
      <t>Magic number(s): n/a</t>
      <t>File extension(s): .json</t>
      <t>Macintosh file type code: TEXT</t>
      <t>Object Identifiers: n/a</t>
    </list></t>
  <t>General Comments:</t>
  <t>Person to contact for further information:
  <list style="numbers">
      <t>Name: Irakli Nadareishvili</t>
      <t>Email: irakli@gmail.com</t>
    </list></t>
  <t>Intended usage: Common</t>
  <t>Author/Change controller: Irakli Nadareishvili</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making an health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses SHOULD be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service. Any method of cach lifetime negotiation provided by HTTP spec is
acceptable (e.g. ETags are just fine).</t>
  <t>Custom link relation types, as well as the URIs for variables, should lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged to obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC8288" target='https://www.rfc-editor.org/info/rfc8288'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2017' month='October' />
<abstract><t>This specification defines a model for the relationships between resources on the Web (&quot;links&quot;) and the type of those relationships (&quot;link relation types&quot;).</t><t>It also defines the serialisation of such links in HTTP headers with the Link header field.</t></abstract>
</front>
<seriesInfo name='RFC' value='8288'/>
<seriesInfo name='DOI' value='10.17487/RFC8288'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC8259" target='https://www.rfc-editor.org/info/rfc8259'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2017' month='December' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='STD' value='90'/>
<seriesInfo name='RFC' value='8259'/>
<seriesInfo name='DOI' value='10.17487/RFC8259'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
<abstract><t>This document defines a date and time format for use in Internet protocols that is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.</t></abstract>
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIAC3XdFwAA+1c7XLbyJX9j6fo4vyI7ZAURUm2zP2oVWxPrOzYmrXkZLOp
VKoJNEWMQIBBA6KZKafyILsvlyfZc+7tBkFJ9kyyk61sNvkRU0Dj9u37ee7t
7hmNRkmTN4WbmdfOFs3SvFi69Ma8c35dld6ZL6t6ZRuzqGrz+urqa3P29blP
7Hxeu9tZklVpaVf4Nqvtohnlpc1s7fKRXeejpZAbpSQ3mhwlmW0wcDo5PE1S
/Lyu6u3M5OWiSpJ8Xc9MU7e+mU4mzyfTBETszPzUla62RbKp6pvrumrXs+TG
bfFXNjPnZePq0jWjl5w5SXxjy+w3tqhKTLJ1PlnnM/OrpkqHBv+Xl5krm6Hx
Vd3UbuHxa7sKP5o6T/EqrVZrG36sMBiv8rLIS/frJLFts6zqWWJGicH/8tKD
gbF5q6v1y9u8yOWNCuO8tjdF/sBrzOVcMzOHh8fmBKI+u3Vl6+RVmjcQx1u3
Mb/EavVR1ZYNhfS+zBuXmcsGYvPyyq1sXkB6MtG/XPOvMfiWd22NlS+bZj07
ONhsNuNF7fxyXrT13MuYpBSN5rcOCzLvvnwxPTx8Hn4ePT99yp9f4PfJdPo0
PD6dnp6Gn8+mR8fd0xN8l1CF+wQxZhJ+Pj096n15GKc5OuKXo9HI2DmEArkn
ydUy9wYG1VL6Zl1X68o7b6zxrr7NU2fUoIwYlKmjfS4esM+x0i6rxv3mLf+v
qX7zztnM1T5JnjwBB+bVy/Ori3czsy6cBZXarapbZxry4F3a5FVp5g5EnVm3
8yKHxeLRkydk05nc+xasFbnXieUzcQGTWn6Ip22ZGfD1j9SEhyqu82bZzqmB
g+gmB/UiDW4iizpQuv881llWFcjXLqU4lDhm6ZOMdMaBdl7do0ha75REurTl
NQWKNZFz96fzR9fIG3+wsvi8Ju1L54wtfAUROGXyR96kbV1zRvhk03q4i7w9
f3X1pUEQsNT3jauHmD7ppu+9GOeuWYyr+voA1nDwHZFFVkhlr/IsK1ySfMHQ
UFdZK0pUSd6CX7Oy31Q1vMxUC4gWtlCKrYDr/DYvr4U1xAqzcXODWIIx87zA
6tbrqH5vWu8SsbJvvw12/vGjsZ7ry2vaLGJNVYwNJw3mSlLtuslXjhNjIKxN
YmjmIMMVAoyxt/Bfi9kCd5TW3rR4sPKuuHV+jNWZLGfQmrdUod9CFSufzNu8
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

-->

</rfc>

