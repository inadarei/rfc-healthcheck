



Network Working Group                                   I. Nadareishvili
Internet-Draft                                          January 17, 2018
Intended status: Informational
Expires: July 21, 2018


               Health Check Response Format for HTTP APIs
                   draft-inadarei-api-health-check-00

Abstract

   This document proposes a service health check response format for
   HTTP APIs.

Note to Readers

   *RFC EDITOR: please remove this section before publication*

   The issues list for this draft can be found at
   https://github.com/inadarei/rfc-healthcheck/issues [1].

   The most recent draft is at https://inadarei.github.io/rfc-
   healthcheck/ [2].

   Recent changes are listed at https://github.com/inadarei/rfc-
   healthcheck/commits/master [3].

   See also the draft's current status in the IETF datatracker, at
   https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/
   [4].

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on July 21, 2018.




Nadareishvili             Expires July 21, 2018                 [Page 1]

Internet-Draft Health Check Response Format for HTTP APIs   January 2018


Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Notational Conventions  . . . . . . . . . . . . . . . . . . .   3
   3.  API Health Response . . . . . . . . . . . . . . . . . . . . .   3
   4.  Details Object  . . . . . . . . . . . . . . . . . . . . . . .   6
   5.  Security Considerations . . . . . . . . . . . . . . . . . . .   8
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   8
     6.1.  Media Type Registration . . . . . . . . . . . . . . . . .   8
   7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   9
     7.1.  Normative References  . . . . . . . . . . . . . . . . . .   9
     7.2.  Informative References  . . . . . . . . . . . . . . . . .   9
     7.3.  URIs  . . . . . . . . . . . . . . . . . . . . . . . . . .  10
   Appendix A.  Acknowledgements . . . . . . . . . . . . . . . . . .  10
   Appendix B.  Creating and Serving Health Responses  . . . . . . .  10
   Appendix C.  Consuming Health Check Responses . . . . . . . . . .  10
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  11

1.  Introduction

   The vast majority of modern APIs driving data to web and mobile
   applications use HTTP [RFC7230] as their protocol.  The health and
   uptime of these APIs determine availability of the applications
   themselves.  In distributed systems built with a number of APIs,
   understanding the health status of the APIs and making corresponding
   decisions, for failover or circuit-breaking, are essential for
   providing highly available solutions.

   There exists a wide variety of operational software that relies on
   the ability to read health check response of APIs.  There is
   currently no standard for the health check output response, however,
   so most applications either rely on the basic level of information
   included in HTTP status codes [RFC7231] or use task-specific formats.



Nadareishvili             Expires July 21, 2018                 [Page 2]

Internet-Draft Health Check Response Format for HTTP APIs   January 2018


   Usage of task-specific or application-specific rformats creates
   significant challenges, disallowing any meaningful interoprerability
   across different implementations and between different tooling.

   Standardizing a format for health checks can provide any of a number
   of benefits, including:

   o  Flexible deployment - since operational tooling and API clients
      can rely on rich, uniform format, they can be safely combined and
      substituted as needed.

   o  Evolvability - new APIs, conforming to the standard, can safely be
      introduced in any environment and ecosystem that also conforms to
      the same standard, without costly coordination and testing
      requirements.

   This document defines a "health check" format using the JSON format
   [RFC8259] for APIs to use as a standard point for the health
   information they offer.  Having a well-defined format for this
   purpose promotes good practice and tooling.

2.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

3.  API Health Response

   An API Health Response Format (or, interchangeably, "health check
   response") uses the format described in JSON [RFC8259] and has the
   media type "application/vnd.health+json".

   Its content consists of a single mandatory root field ("status") and
   several optional fields:

   o  status: (required) indicates whether the service status is
      acceptable or not.  API publishers SHOULD use following values for
      the field:

      *  "pass": healthy,

      *  "fail": unhealthy, and

      *  "warn": healthy, with some concerns.

      For "pass" and "warn" statuses HTTP response code in the 2xx - 3xx
      range MUST be used. for "fail" status HTTP response code in the



Nadareishvili             Expires July 21, 2018                 [Page 3]

Internet-Draft Health Check Response Format for HTTP APIs   January 2018


      4xx - 5xx range MUST be used.  In case of the "warn" status,
      additional information SHOULD be provided, utilizing optional
      fields of the response.

   o  version: (optional) public version of the service.

   o  release_id: (optional) in well-designed APIs, backwards-compatible
      changes in the service should not update a version number.  APIs
      usually change their version number as infrequently as possible,
      to preserve stable interface.  However implementation of an API
      may change much more frequently, which leads to the importance of
      having separate "release number" or "release_id" that is different
      from the public version of the API.

   o  uptime: (optional) current uptime in seconds since the last
      restart

   o  connections: (optional) current number of active connections

   o  notes: (optional) array of notes relevant to current state of
      health

   o  output: (optional) raw error output, in case of "fail" or "warn"
      states.  This field SHOULD be omitted for "pass" state.

   o  details: (optional) an array of objects optionally providing
      additional information regarding the various sub-components of the
      service.

   o  links: (optional) an array of objects containing link relations
      and URIs [RFC3986] for external links that MAY contain more
      information about the health of the endpoint.  Per web-linking
      standards [RFC5988] a link relationship SHOULD either be a common/
      registered one or be indicated as a URI, to avoid name clashes.

   o  serviceID: (optional) unique identifier of the service, in the
      application scope.

   o  description: (optional) human-friendly description of the service.

   For example:

     GET /health HTTP/1.1
     Host: example.org
     Accept: application/vnd.health+json

     HTTP/1.1 200 OK
     Content-Type: application/vnd.health+json



Nadareishvili             Expires July 21, 2018                 [Page 4]

Internet-Draft Health Check Response Format for HTTP APIs   January 2018


     Cache-Control: max-age=3600
     Connection: close

     {
       "status": "pass",
       "version" : "1",
       "release_id" : "1.2.2",
       "uptime": "1209600.245",
       "connections" : 25,
       "notes": [""],
       "output": "",
       "details": [
         {
           "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
           "componentName": "Cassandra",
           "componentType" : "datastore",
           "metricName" : "responseTime",
           "metricValue": 250,
           "metricUnit" : "milliseconds",
           "status": "pass",
           "time" : "2018-01-17T03:36:48Z",
           "output": ""
         },
         {
           "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
           "componentName": "Cassandra",
           "type" : "datastore",
           "metricName" : "connections",
           "metricValue": 75,
           "status": "warn",
           "time" : "2018-01-17T03:36:48Z",
           "output": ""
         },
         {
           "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
           "componentName": "cpu",
           "type" : "system",
           "metricName" : "utilization",
           "metricValue": 85,
           "metricUnit" : "percent",
           "status": "warn",
           "time" : "2018-01-17T03:36:48Z",
           "output": ""
         },
         {
           "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
           "componentName": "cpu",
           "type" : "system",



Nadareishvili             Expires July 21, 2018                 [Page 5]

Internet-Draft Health Check Response Format for HTTP APIs   January 2018


           "metricName" : "utilization",
           "metricValue": 85,
           "metricUnit" : "percent",
           "status": "warn",
           "time" : "2018-01-17T03:36:48Z",
           "output": ""
         },
         {
           "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
           "componentName": "memory",
           "type" : "system",
           "node" : 1,
           "metricName" : "utilization",
           "metricValue": 8.5,
           "metricUnit" : "gb",
           "status": "warn",
           "time" : "2018-01-17T03:36:48Z",
           "output": ""
         },
         {
           "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
           "componentName": "memory",
           "node" : 2,
           "type" : "system",
           "metricName" : "utilization",
           "metricValue": 5500,
           "metricUnit" : "mb",
           "status": "pass",
           "time" : "2018-01-17T03:36:48Z",
           "output": ""
         }
       ],
       "links": [
         {"rel": "about", "uri": "http://api.example.com/about/authz"},
         {
           "rel": "http://api.example.com/rel/thresholds",
           "uri": "http://api.example.com/about/authz/thresholds"
         }
       ],
       "serviceID": "f03e522f-1f44-4062-9b55-9587f91c9c41",
       "description": "health of authz service"
     }

4.  Details Object

   Following fields MAY appear and rules SHOULD be used for the details
   objects of the reponse.




Nadareishvili             Expires July 21, 2018                 [Page 6]

Internet-Draft Health Check Response Format for HTTP APIs   January 2018


   o  componentId: (required) unique identifier of an instance of a
      specific sub-component/dependency of a service.  Multiple objects
      with the same componentId MAY appear in the details, if they are
      from different nodes.

   o  status: (required) "pass", "fail" or "warn".  Same semantic
      meaning as at the top level.

   o  componentName: (optional) human-readable name for the component.

   o  componentType: (optional) SHOULD be present if componentName is
      present.  Type of the component.  Could be one of:

      *  Pre-defined value from this spec.  Pre-defined values include:

         +  component

         +  datastore

         +  system

      *  A common and standard term from a well-known source such as
         schema.org, IANA or microformats.

      *  A URI that indicates extra semantics and processing rules that
         MAY be provided by a resource at the other end of the URI.
         URIs do not have to be dereferenceable, however.  They are just
         a namespace, and the meaning of a namespace CAN be provided by
         any convenient means (e.g. publishing an RFC, Swagger document
         or a nicely printed book).

   o  metricName: (optional) Could be one of:

      *  Pre-defined value from this spec.  Pre-defined values include:

         +  utilization

         +  responseTime

         +  connections

      *  A common and standard term from a well-known source such as
         schema.org, IANA or microformats.

      *  A URI that indicates extra semantics and processing rules that
         MAY be provided by a resource at the other end of the URI.
         URIs do not have to be dereferenceable, however.  They are just
         a namespace, and the meaning of a namespace CAN be provided by



Nadareishvili             Expires July 21, 2018                 [Page 7]

Internet-Draft Health Check Response Format for HTTP APIs   January 2018


         any convenient means (e.g. publishing an RFC, Swagger document
         or a nicely printed book).

   o  metricValue: (optional) could be any valid JSON value, such as:
      string, number, object, array or literal.

   o  metricUnit: (optional) SHOULD be present if metricValue is
      present.  Could be one of:

      *  Pre-defined value from this spec.  Pre-defined values include:

         +  data size abbreviations: kb, mb, gb, tb, or pb that
            respectively stand for: kilobyte, megabyte, gigabyte,
            terabyte and petabyte.

         +  time abbreviations: ns, ms, s, hr, min, d, yr that
            respectively stand for: nanosecond, millisecond, second,
            hour, day, and year.

      *  A common and standard term from a well-known source such as
         schema.org, IANA or microformats.

      *  A URI that indicates extra semantics and processing rules that
         MAY be provided by a resource at the other end of the URI.
         URIs do not have to be dereferenceable, however.  They are just
         a namespace, and the meaning of a namespace CAN be provided by
         any convenient means (e.g. publishing an RFC, Swagger document
         or a nicely printed book).

   o  output: (optional) raw error output, in case of "fail" or "warn"
      states.  This field SHOULD be omitted for "pass" state.

5.  Security Considerations

   Clients need to exercise care when reporting health information.
   Malicious actors could use this information for orchestrating
   attacks.  In some cases the health check endpoints may need to be
   authenticated and institute role-based access control.

6.  IANA Considerations

6.1.  Media Type Registration

   TODO: application/vnd.health+json is being submitted for registration
   per [RFC6838]






Nadareishvili             Expires July 21, 2018                 [Page 8]

Internet-Draft Health Check Response Format for HTTP APIs   January 2018


7.  References

7.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              RFC 3986, DOI 10.17487/RFC3986, January 2005,
              <https://www.rfc-editor.org/info/rfc3986>.

   [RFC5988]  Nottingham, M., "Web Linking", RFC 5988,
              DOI 10.17487/RFC5988, October 2010,
              <https://www.rfc-editor.org/info/rfc5988>.

   [RFC7234]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
              Ed., "Hypertext Transfer Protocol (HTTP/1.1): Caching",
              RFC 7234, DOI 10.17487/RFC7234, June 2014,
              <https://www.rfc-editor.org/info/rfc7234>.

   [RFC8259]  Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", STD 90, RFC 8259,
              DOI 10.17487/RFC8259, December 2017,
              <https://www.rfc-editor.org/info/rfc8259>.

7.2.  Informative References

   [RFC6838]  Freed, N., Klensin, J., and T. Hansen, "Media Type
              Specifications and Registration Procedures", BCP 13,
              RFC 6838, DOI 10.17487/RFC6838, January 2013,
              <https://www.rfc-editor.org/info/rfc6838>.

   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <https://www.rfc-editor.org/info/rfc7230>.

   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Semantics and Content", RFC 7231,
              DOI 10.17487/RFC7231, June 2014,
              <https://www.rfc-editor.org/info/rfc7231>.







Nadareishvili             Expires July 21, 2018                 [Page 9]

Internet-Draft Health Check Response Format for HTTP APIs   January 2018


7.3.  URIs

   [1] https://github.com/inadarei/rfc-healthcheck/issues

   [2] https://inadarei.github.io/rfc-healthcheck/

   [3] https://github.com/inadarei/rfc-healthcheck/commits/master

   [4] https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/

Appendix A.  Acknowledgements

   Thanks to Mike Amundsen, Erik Wilde, Justin Bachorik and Randall
   Randall for their suggestions and feedback.  And to Mark Nottingham
   for blueprint for authoring RFCs easily.

Appendix B.  Creating and Serving Health Responses

   When making an health check endpoint available, there are a few
   things to keep in mind:

   o  A health response endpoint is best located at a memorable and
      commonly-used URI, such as "health" because it will help self-
      discoverability by clients.

   o  Health check responses can be personalized.  For example, you
      could advertise different URIs, and/or different kinds of link
      relations, to afford different clients access to additional health
      check information.

   o  Health check responses must be assigned a freshness lifetime
      (e.g., "Cache-Control: max-age=3600") so that clients can
      determine how long they could cache them, to avoid overly frequent
      fetching and unintended DDOS-ing of the service.

   o  Custom link relation types, as well as the URIs for variables,
      should lead to documentation for those constructs.

Appendix C.  Consuming Health Check Responses

   Clients might use health check responses in a variety of ways.

   Note that the health check response is a "living" document; links
   from the health check response MUST NOT be assumed to be valid beyond
   the freshness lifetime of the health check response, as per HTTP's
   caching model [RFC7234].





Nadareishvili             Expires July 21, 2018                [Page 10]

Internet-Draft Health Check Response Format for HTTP APIs   January 2018


   As a result, clients ought to cache the health check response (as per
   [RFC7234]), to avoid fetching it before every interaction (which
   would otherwise be required).

   Likewise, a client encountering a 404 (Not Found) on a link is
   encouraged to obtain a fresh copy of the health check response, to
   assure that it is up-to-date.

Author's Address

   Irakli Nadareishvili
   114 5th Avenue
   New York
   United States

   Email: irakli@gmail.com
   URI:   http://www.freshblurbs.com


































Nadareishvili             Expires July 21, 2018                [Page 11]
